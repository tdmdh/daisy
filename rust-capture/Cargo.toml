[package]
name = "second-screen-capture"
version = "0.1.0"
edition = "2021"
authors = ["Your Name <your.email@example.com>"]
description = "High-performance screen capture and streaming service for Second Screen"
license = "MIT"

[lib]
name = "second_screen_capture"
path = "src/lib.rs"

[[bin]]
name = "capture-service"
path = "src/main.rs"

[dependencies]
# Async runtime - Tokio is the most popular async runtime in Rust
tokio = { version = "1.35", features = [
    "full",           # Include all features for development
    "rt-multi-thread" # Multi-threaded runtime for performance
] }

# WebSocket for signaling
tokio-tungstenite = "0.21"

# Serialization - for network protocols and config
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"  # JSON support
bincode = "1.3"      # Binary serialization (more efficient)

# Logging - tracing is the modern logging framework for Rust
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt", "json"] }

# Error handling - thiserror for library errors, anyhow for application errors
thiserror = "1.0"  # For creating custom error types
anyhow = "1.0"     # For easy error handling in applications

# Configuration
config = "0.14"
toml = "0.8"
dirs = "5.0"  # For getting user directories cross-platform

# Performance utilities
bytes = "1.5"           # Efficient byte buffer handling
parking_lot = "0.12"    # Faster mutexes than std

# Windows API - for screen capture and input injection
[target.'cfg(windows)'.dependencies]
windows = { version = "0.52", features = [
    "Win32_Foundation",
    "Win32_Graphics_Direct3D11",
    "Win32_Graphics_Dxgi",
    "Win32_Graphics_Dxgi_Common",
    "Win32_System_Threading",
    "Win32_System_Com",
    "Win32_UI_Input",
    "Win32_UI_WindowsAndMessaging",
    "Win32_System_SystemInformation",
] }

# Network interface detection
network-interface = "1.1"

[dev-dependencies]
# Testing
mockall = "0.12"           # Mocking for unit tests
criterion = "0.5"          # Benchmarking framework
tokio-test = "0.4"         # Testing utilities for async code

[profile.dev]
# Development profile - faster compile times
opt-level = 0
debug = true

[profile.release]
# Release profile - maximum performance
opt-level = 3              # Maximum optimization
lto = "thin"               # Link-time optimization (thin is faster than full)
codegen-units = 1          # Better optimization but slower compile
panic = "abort"            # Smaller binaries, faster panics
strip = true               # Strip symbols from binary

[profile.bench]
# Benchmark profile
inherits = "release"
debug = true               # Keep debug info for profiling

# Cargo features - optional functionality
[features]
default = ["hardware-encoding"]

# Hardware video encoding support (can be disabled for testing)
hardware-encoding = []

# Metrics and monitoring
metrics = []

# Development helpers
dev-tools = []